#!/usr/bin/env node
"use strict";
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('fan2c:server');
var http = require('http');
var data = require('./data');
var db = require('./db');
var api = require("./remote-api");
var _ = require("lodash");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.argv[2]||3551);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require("socket.io")(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  db.init(function ( res ) {
    var name, keys = Object.keys(res);
    while ( name = keys.shift() ) {
      if ( res[name].length < 1 ) {
        // Need to refresh if it's empty.
        data.refresh(name, null, function ( typeStr, res ) {
          db.push(typeStr, res, function ( res ) {
            api.data[typeStr] = res;
          });
        });
      }
    }
  });

}

io.on("connection", function ( socket ) {
  if ( _.values(api.data) )
  db.init(function ( data ) {
    socket.emit("initialize", data);
    console.log("initialized");
  });

  /*socket.on("client-pull", function ( typeStr ) {
    console.log("client-pull");
    clientPull(typeStr, function ( data ) {
      socket.emit("data-send", data);
      console.log("data-send");
    });
  });*/

  socket.on("disconnect", function () {
    console.log("...and it's over");
  });
});

io.on("data-change", function ( data ) {
  io.emit("data-send", data);
});

/*

// Repeats every twelve hours
var echo, shouldUpdate = true;
var halfDay = setInterval(function () {

  if ( !shouldUpdate ) {
    clearInterval(echo);
  }
  else {
    echo = setInterval(function () {
      // Update data every four seconds
      // ...get data...diff against current...send if new.
      io.emit("data-change", data);
    }, 4000);
  }

  shouldUpdate = !shouldUpdate;
}, 43200000);
*/
